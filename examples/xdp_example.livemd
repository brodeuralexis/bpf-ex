<!-- livebook:{"persist_outputs":true} -->

# Example 2

```elixir
Mix.install([
  {:bpf, path: ".."}
])
```

## What is BPF

BPF (Berkeley Packet Filter) is a technology for the Linux kernel that has existed for many in years in order for tools like *WireShark* or *tcpdump* to filter network traffic.

In recent years, BPF has seen a surge in popularity to do the introduction of an extended feature set, enabling users to do a lot more than simple packet filtering. Modern BPF is a fully fledged bytecode for modern CPU architectures enabling generation of fast and efficient machine code.

BPF programs are written in a low-level programming language like C or Rust, and are compiled to BPF bytecode.  There are many approaches to compiling and using BPF programs, but the Linux development community has created and maintains *libbpf* for such a purpose.

Writting BPF programs is out-of-scope for this document.  One may however refer to the [syscall counter](https://github.com/brodeuralexis/bpf-ex/blob/master/examples/syscall_counter.c) for an example program used in this notebook.

## Opening & Loading

`BPF` enables working with BPF objects, programs, maps, etc. in an easy and intuitive manner. In this section, we will present how opening and loading BPF programs work with `BPF`.

A compiled BPF program is distributed in object for, which consists of an ELF file with sections for the programs, the maps, relocation, debug information, etc.  Using `BPF.Object.open_file/1`, we can open this file and see what is inside of it:

```elixir
object = BPF.Object.open_file!("xdp_pass.o")
```

<!-- livebook:{"output":true} -->

```
#BPF.Object<
  name: "xdp_pass",
  maps: %{},
  programs: %{"xdp_pass" => #BPF.Program<name: "xdp_pass", section_name: "xdp", ...>},
  ...
>
```

An opened BPF object file means that its programs are copied into userspace memory, and its maps are created.  After the program is opened, one may start to read and write to the maps, or change configuration options.

We have no need to change anything, so we load the program into kernel memory:

```elixir
BPF.Object.load!(object)
```

<!-- livebook:{"output":true} -->

```
:ok
```

A loaded BPF object signifies that all of its programs have been copied into kernel memory.  We are now able to link program to attach points in the Linux kernel.

## Attaching

An attach point can be thought of as an event generator, and the program itself as an event listener.  The Linux kernel offers multiple attach points allowing us to do a multitude of things like filtering packets, observing system calls, dissecting network flow, etc.

Here, we attach the `do_sys_exit` program which will count the number of successful and unsuccessful system calls for every system calls on the host system:

```elixir
{:ok, link} = BPF.Program.attach_xdp(object.programs["xdp_pass"], 2)
```

<!-- livebook:{"output":true} -->

```
{:ok, #BPF.Link<...>}
```

When attaching a program, a `BPF.Link` is returning.  A `BPF.Link` represents the link between an attach point and a program. Some types of links even allow atomic replacement of programs.

## Cleaning

```elixir
BPF.Link.detach(link)
```

<!-- livebook:{"output":true} -->

```
:ok
```
